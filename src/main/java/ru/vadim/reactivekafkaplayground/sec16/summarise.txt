1. **Spring Reactive Kafka – простой и легковесный инструмент**:
    - Используются только два шаблона: **Reactive Kafka Producer Template** и **Reactive Kafka Consumer Template**.
    - `Producer Template` принимает настройки **Sender Options** и делегирует операции объекту Kafka Sender.
    - `Consumer Template` создаётся с помощью **Receiver Options**.

2. **Работа с объектами вместо строк**:
    - В реальной жизни чаще всего используются объекты, такие как `OrderEvent`, `UserRegistrationEvent` и т.д.
    - Сторона продюсера использует **JSON-сериализатор** для создания сообщений в формате JSON.
    - Сторона консюмера должна уметь правильно обрабатывать заголовки (например, `__TypeId__`) или учитывать свойства для корректной десериализации.

3. **Обработка соответствия форматов и отлов ошибок**:
    - Проблемы могут возникнуть, если формат данных, отправляемых продюсером, не совпадает с ожидаемым форматом консюмера.
    - Для обработки ошибок можно использовать **Error Handling Deserializer**:
        - Десериализатор от Spring помогает обрабатывать исключения.
        - Можно настроить десериализатор на возврат объекта по умолчанию или на отправку данных в **Dead Letter Queue (DLQ)**.
